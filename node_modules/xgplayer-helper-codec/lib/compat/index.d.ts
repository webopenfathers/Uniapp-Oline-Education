export default Compatibility;
declare class Compatibility {
    static sortAudioSamples(samples: any): any;
    static isRefSampleDurationValid(refSampleDuration: any): boolean;
    /**
     * 寻找dts最小的sample
     * @param samples
     */
    static findFirstAudioSample(samples: any): any;
    static findFirstVideoSample(samples: any): any;
    static detectVideoLargeGap(nextDts: any, firstSampleDts: any): boolean;
    static detectAudioLargeGap(nextDts: any, firstSampleDts: any): boolean;
    static doFixLargeGap(samples: any, gap: any): void;
    /**
     * 中途换流
     *         |-------------------frag2---------------|
     * | frag1 | -----sample 0~n -------sample n+1 ~ m |
     *
     * 换流可能开始于新分片的第一帧 或者分片中间
     *
     */
    static detectChangeStream(samples: any, isFirst: any): {
        changed: boolean;
        changedIdxes: number[];
    };
    TAG: string;
    nextAudioDts: number;
    nextVideoDts: number;
    lastAudioSamplesLen: number;
    lastVideoSamplesLen: number;
    lastVideoDts: any;
    lastAudioDts: any;
    allAudioSamplesCount: number;
    allVideoSamplesCount: number;
    _firstAudioSample: any;
    _firstVideoSample: any;
    filledAudioSamples: any[];
    filledVideoSamples: any[];
    videoLastSample: any;
    audioLastSample: any;
    ___videoLargeGap: any;
    ___audioLargeGap: any;
    audioUnsyncTime: number;
    init(): void;
    reset(): void;
    lastVideoDuration: any;
    _audioLargeGap: number;
    _videoLargeGap: number;
    doFix(): void;
    doFixVideo(first: any, streamChangeStart: any): void;
    preVideoGap: any;
    doFixAudio(first: any, streamChangeStart: any): void;
    preAudioGap: any;
    lastAudioOriginDts: any;
    fixChangeStreamVideo(changeIdx: any): boolean;
    fixChangeStreamAudio(changeIdx: any): boolean;
    getFirstSample(): {
        isFirstVideoSamples: boolean;
        isFirstAudioSamples: boolean;
    };
    /**
     * 在没有refSampleDuration的问题流中，
     */
    fixVideoRefSampleDuration(meta: any, samples: any): void;
    fixAudioRefSampleDuration(meta: any): void;
    /**
     * 记录截止目前一共播放了多少帧
     */
    recordSamplesCount(): void;
    /**
     * 去除不合法的帧（倒退、重复帧）
     */
    removeInvalidSamples(): void;
    getStreamChangeStart(sample: any): number;
    get tracks(): any;
    get audioTrack(): any;
    get videoTrack(): any;
    get dtsBase(): any;
    get audioDtsBase(): any;
    get videoDtsBase(): any;
}
