import { typeof as _typeof, objectSpread2 as _objectSpread2 } from "./_virtual/_rollupPluginBabelHelpers.js";
import SubTitleParser from "./parser.js";
import { _ERROR } from "./error.js";
import XHR from "./xhr.js";
import ProxyPromise from "./proxyPromise.js";
function hasClass(el, className) {
  if (!el) {
    return false;
  }
  if (el.classList) {
    return Array.prototype.some.call(el.classList, function(item) {
      return item === className;
    });
  } else {
    var orgClassName = el.className && _typeof(el.className) === "object" ? el.getAttribute("class") : el.className;
    return orgClassName && !!orgClassName.match(new RegExp("(\\s|^)" + className + "(\\s|$)"));
  }
}
function addClass(el, className) {
  if (!el) {
    return;
  }
  if (el.classList) {
    className.replace(/(^\s+|\s+$)/g, "").split(/\s+/g).forEach(function(item) {
      item && el.classList.add(item);
    });
  } else if (!hasClass(el, className)) {
    if (el.className && _typeof(el.className) === "object") {
      el.setAttribute("class", el.getAttribute("class") + " " + className);
    } else {
      el.className += " " + className;
    }
  }
}
function removeClass(el, className) {
  if (!el) {
    return;
  }
  if (el.classList) {
    className.split(/\s+/g).forEach(function(item) {
      el.classList.remove(item);
    });
  } else if (hasClass(el, className)) {
    className.split(/\s+/g).forEach(function(item) {
      var reg = new RegExp("(\\s|^)" + item + "(\\s|$)");
      if (el.className && _typeof(el.className) === "object") {
        el.setAttribute("class", el.getAttribute("class").replace(reg, " "));
      } else {
        el.className = el.className.replace(reg, " ");
      }
    });
  }
}
function findIndexByTime(currentTime, list, index) {
  var len = list.length;
  if (len < 1) {
    return -1;
  }
  index = index < 0 ? 0 : index >= len ? len - 1 : index;
  if (list[index].start <= currentTime && currentTime < list[index].end) {
    return index;
  } else {
    var i = list[index].end <= currentTime ? index + 1 : 0;
    for (; i < len; i++) {
      if (list[i].start <= currentTime && currentTime < list[i].end) {
        return i;
      } else if (currentTime > list[i].end && i + 1 < len && currentTime < list[i + 1].start) {
        return -1;
      } else if (currentTime > list[i].end && i + 1 >= len) {
        return -1;
      }
    }
    return -1;
  }
}
function findCIndexByTime(currentTime, list, index) {
  var len = list.length;
  if (len < 1) {
    return [];
  }
  index = index < 0 ? 0 : index >= len ? len - 1 : index;
  var ids = [];
  if (index < len) {
    var i = list[index].end <= currentTime ? index : 0;
    for (; i < len; i++) {
      if (list[i].start <= currentTime && currentTime < list[i].end) {
        ids.push(i);
      }
      if (currentTime < list[i].start) {
        break;
      }
    }
  }
  return ids;
}
function getItemsByIndex(list, gid, cids) {
  if (list.length === 0 || gid < 0 || gid > list.length - 1) {
    return [];
  }
  var gList = list[gid].list;
  if (cids.length === 0) {
    return [];
  }
  var ret = gList.splice(cids[0], cids.length);
  if (gid > 0) {
    list.splice(0, gid);
  }
  if (gList.length === 0) {
    list.splice(0, 1);
  }
  return ret;
}
function typeOf(obj) {
  return Object.prototype.toString.call(obj).match(/([^\s.*]+)(?=]$)/g)[0];
}
function createDom() {
  var el = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "div";
  var tpl = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var attrs = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var cname = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "";
  var dom = document.createElement(el);
  dom.className = cname;
  dom.innerHTML = tpl;
  Object.keys(attrs).forEach(function(item) {
    var key = item;
    var value = attrs[item];
    if (el === "video" || el === "audio" || el === "live-video") {
      if (value) {
        dom.setAttribute(key, value);
      }
    } else {
      dom.setAttribute(key, value);
    }
  });
  return dom;
}
function isMobile() {
  var ua = navigator.userAgent;
  var isWindowsPhone = /(?:Windows Phone)/.test(ua);
  var isSymbian = /(?:SymbianOS)/.test(ua) || isWindowsPhone;
  var isAndroid = /(?:Android)/.test(ua);
  var isFireFox = /(?:Firefox)/.test(ua);
  var isTablet = /(?:iPad|PlayBook)/.test(ua) || isAndroid && !/(?:Mobile)/.test(ua) || isFireFox && /(?:Tablet)/.test(ua);
  var isPhone = /(?:iPhone)/.test(ua) && !isTablet;
  return isPhone || isAndroid || isSymbian || isTablet;
}
function addCSS(styles) {
  var preTag = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var cssText = "";
  styles.map(function(item) {
    cssText += " ".concat(preTag, " ").concat(item.key, " {").concat(item.style, "}");
  });
  var styleTag = document.createElement("style");
  var head = document.head || document.getElementsByTagName("head")[0];
  styleTag.type = "text/css";
  styleTag.id = "ssss";
  if (styleTag.styleSheet) {
    var func = function func2() {
      try {
        styleTag.styleSheet.cssText = cssText;
      } catch (e) {
      }
    };
    if (styleTag.styleSheet.disabled) {
      setTimeout(func, 10);
    } else {
      func();
    }
  } else {
    var textNode = document.createTextNode(cssText);
    styleTag.appendChild(textNode);
  }
  head.appendChild(styleTag);
}
function parse(content, format, promise) {
  if (!promise) {
    promise = new ProxyPromise();
  }
  if (format === "json") {
    var list = SubTitleParser.parseJson(content);
    promise.resolve({
      list,
      format: "json"
    });
  } else if (format === "string") {
    SubTitleParser.parse(content, function(data, error) {
      if (error) {
        var err = _ERROR(2, error);
        promise.reject(err, {
          format: data.format
        });
      } else if (!data.format) {
        var _err3 = _ERROR(3);
        promise.reject(_err3);
      } else {
        promise.resolve({
          styles: data.styles,
          list: data.list,
          format: data.format
        });
      }
    });
  }
  return promise;
}
function loadSubTitle(object, promise) {
  if (!promise) {
    promise = new ProxyPromise();
  }
  new XHR({
    url: object.url,
    type: "text"
  }).then(function(data) {
    parse(data.res.response, "string").then(function(data2) {
      promise.resolve(_objectSpread2(_objectSpread2({}, data2), object));
    }).catch(function(e) {
      promise.reject(e);
    });
  }).catch(function(err) {
    var _err = _ERROR(1, _objectSpread2({
      statusText: err.statusText,
      status: err.status,
      type: err.type,
      message: "http load error",
      url: object.src
    }, object));
    promise.reject(_err);
  });
  return promise;
}
function checkSubtitle(src, dist) {
  if (src.id && dist.id && src.id === dist.id || src.language && dist.language && src.language === dist.language) {
    return true;
  }
  return false;
}
export { addCSS, addClass, checkSubtitle, createDom, findCIndexByTime, findIndexByTime, getItemsByIndex, hasClass, isMobile, loadSubTitle, parse, removeClass, typeOf };
