import { inherits as _inherits, createSuper as _createSuper, createClass as _createClass, classCallCheck as _classCallCheck, defineProperty as _defineProperty, assertThisInitialized as _assertThisInitialized, possibleConstructorReturn as _possibleConstructorReturn, objectSpread2 as _objectSpread2, get as _get, getPrototypeOf as _getPrototypeOf } from "./_virtual/_rollupPluginBabelHelpers.js";
import EventEmitter from "eventemitter3";
import { isMobile, typeOf, checkSubtitle, addCSS, addClass, parse, loadSubTitle, findIndexByTime, findCIndexByTime, getItemsByIndex, createDom, removeClass } from "./utils.js";
import { addObserver, unObserver } from "./observer.js";
import { EVENTS } from "./constants.js";
import { _ERROR } from "./error.js";
import ProxyPromise from "./proxyPromise.js";
function formatUrl(url) {
  var ret = [];
  if (url && typeOf(url) === "String") {
    ret.push({
      url,
      index: 0,
      start: -1,
      end: -1
    });
  } else if (typeOf(url) === "Array") {
    url.forEach(function(item, i) {
      ret.push({
        url: item.url || item.src,
        index: i,
        start: item.start || -1,
        end: item.end || -1
      });
    });
  }
  return ret;
}
var IS_MOBILE = false;
var Subtitle = /* @__PURE__ */ function(_EventEmitter) {
  _inherits(Subtitle2, _EventEmitter);
  var _super = _createSuper(Subtitle2);
  function Subtitle2(options) {
    var _this;
    _classCallCheck(this, Subtitle2);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "_onTimeupdate", function() {
      if (!_this._isOpen) {
        return;
      }
      var _this$player$video = _this.player.video, videoWidth = _this$player$video.videoWidth, videoHeight = _this$player$video.videoHeight;
      if (!_this._videoMeta.scale && videoWidth && videoHeight) {
        _this._onResize(_this.player.root);
      }
      var curTime = _this._getPlayerCurrentTime();
      if (Math.round(Math.abs(curTime * 1e3 - _this._ctime)) < 200) {
        return;
      }
      _this._ctime = curTime * 1e3;
      if (_this.currentText && _this.currentText.list) {
        _this.config.updateMode === "live" ? _this._liveUpdate(curTime) : _this._update(curTime);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "getItemsByIndex", void 0);
    _defineProperty(_assertThisInitialized(_this), "_onResize", function(target) {
      var _assertThisInitialize = _assertThisInitialized(_this), _videoMeta = _assertThisInitialize._videoMeta, config = _assertThisInitialize.config;
      if (!config.domRender) {
        return;
      }
      if (!target || !(target instanceof window.Element)) {
        target = _this.player.root;
      }
      if (_this._iId) {
        clearTimeout(_this._iId);
        _this._iId = null;
      }
      if (!_videoMeta.scale) {
        if (!_this.player.video) {
          return;
        }
        var _this$player$video2 = _this.player.video, videoWidth = _this$player$video2.videoWidth, videoHeight = _this$player$video2.videoHeight;
        if (videoWidth && videoHeight) {
          _videoMeta.videoWidth = videoWidth;
          _videoMeta.videoHeight = videoHeight;
          _videoMeta.scale = parseInt(videoHeight / videoWidth * 100, 10);
        } else {
          return;
        }
      }
      _this.__startResize(target);
    });
    _defineProperty(_assertThisInitialized(_this), "_onCoreEvents", function(e) {
      try {
        switch (e.eventName) {
          case "core.subtitlesegments":
            _this._onSubtitleSegment(e.list || []);
            break;
          case "core.subtitleplaylist":
            _this._onSubtitlePlaylist(e.list || []);
            break;
          case "core.seipayloadtime":
            _this._onCoreSeiintime(e);
            break;
          default:
        }
      } catch (e2) {
        console.error(e2);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "destroy", function() {
      _this.detachPlayer();
      _this.removeAllListeners();
      _this.player = null;
      _this.textTrack = null;
    });
    IS_MOBILE = isMobile();
    _this.currentText = null;
    _this.currentExtText = null;
    _this.textTrack = [];
    _this._cid = -1;
    _this._gid = -1;
    _this._cids = [];
    _this._iId = null;
    _this._iC = 0;
    _this.player = null;
    _this.root = null;
    _this.config = {
      line: "double",
      bottom: 0,
      mode: "stroke",
      defaultOpen: false,
      baseSizeX: 49,
      baseSizeY: 28,
      minSize: 16,
      minMobileSize: 13,
      fitVideo: true,
      offsetBottom: 2,
      fontColor: "#fff",
      domRender: true,
      updateMode: "vod",
      debugger: false
    };
    _this._ctime = 0;
    _this._loadingTrack = {};
    Object.keys(_this.config).map(function(key) {
      if (options[key] !== void 0 && options[key] !== null) {
        _this.config[key] = options[key];
      }
    });
    _this._isOpen = _this.config.defaultOpen || false;
    _this._videoMeta = {
      scale: 0,
      videoHeight: 0,
      videoWidth: 0,
      lwidth: 0,
      lheight: 0,
      vWidth: 0,
      vHeight: 0,
      vBottom: 0,
      vLeft: 0,
      marginBottom: 0
    };
    if (!options.subTitles || typeOf(options.subTitles) !== "Array") {
      return _possibleConstructorReturn(_this);
    }
    if (options.player) {
      _this.attachPlayer(options.player);
    }
    _this.seiTime = 0;
    _this.lastSeiTime = 0;
    _this._curTexts = [];
    _this.setSubTitles(options.subTitles, _this.config.defaultOpen);
    return _this;
  }
  _createClass(Subtitle2, [{
    key: "version",
    get: function get() {
      return "1.1.1";
    }
  }, {
    key: "setSubTitles",
    value: function setSubTitles() {
      var _this2 = this;
      var subTitles = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var isOpen = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var ieRemoveFirst = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var _isOpen = this._isOpen || isOpen;
      ieRemoveFirst && this.innerRoot && this.switchOff();
      this.currentText = null;
      this.textTrack = [];
      subTitles.forEach(function(item) {
        var text = {};
        Object.keys(item).map(function(key) {
          text[key] = item[key];
        });
        text.url = formatUrl(text.url);
        if (text.isDefault) {
          _this2.currentText = text;
        }
        _this2.textTrack.push(text);
      });
      this._log("setSubTitles", _isOpen);
      if (_isOpen) {
        this.switch().catch(function(e) {
          _this2._log("[switch]", e);
        });
      }
      this.currentText && this._loadTrack(this.currentText).then(function(textTrack) {
        _this2.addStyles(textTrack);
      });
      this.emit("reset", {
        list: this.textTrack,
        isOpen: _isOpen
      });
    }
  }, {
    key: "updateSubTitle",
    value: function updateSubTitle(subTitle) {
      var _this3 = this;
      var index = -1;
      for (var i = 0; i < this.textTrack.length; i++) {
        if (checkSubtitle(subTitle, this.textTrack[i])) {
          index = i;
          break;
        }
      }
      this._log("updateSubTitle", index, subTitle);
      if (index > -1) {
        var _isCurrent = checkSubtitle(this.currentText, this.textTrack[index]);
        this._log("updateSubTitle", "_isCurrent", _isCurrent, "this.isOpen", this.isOpen, this.currentText);
        if (!_isCurrent) {
          return;
        }
        var url = formatUrl(subTitle.url);
        if (!this.isOpen) {
          this.textTrack[index].url = url;
        } else {
          url.forEach(function(item) {
            _this3.textTrack[index].url.push(item);
          });
          this._log("updateSubTitle _loadTrackUrls", this.textTrack[index]);
          this._loadTrackUrls(this.currentText, 2);
        }
      }
    }
  }, {
    key: "addStyles",
    value: function addStyles(textTrack) {
      var styles = textTrack.styles, format = textTrack.format;
      if (styles && format === "vtt") {
        styles.map(function(item) {
          if (!item.key) {
            item.key = "xg-text-track-span";
          }
        });
        addCSS(styles, "xg-text-track");
      }
    }
  }, {
    key: "attachPlayer",
    value: function attachPlayer(player) {
      var _this4 = this;
      this._log("attachPlayer");
      if (!player) {
        return;
      }
      if (this.player) {
        this.detachPlayer();
      }
      var _this$config = this.config, fontColor = _this$config.fontColor, mode = _this$config.mode, fitVideo = _this$config.fitVideo, domRender = _this$config.domRender;
      this.player = player;
      if (domRender) {
        this.root = document.createElement("xg-text-track");
        this.root.className = "xg-text-track";
        !this._isOpen && addClass(this.root, "text-track-hide");
        !fitVideo && addClass(this.root, "text-track-no-fitvideo");
        mode && addClass(this.root, "text-track-".concat(mode));
        this.innerRoot = document.createElement("xg-text-track-inner");
        this.root.appendChild(this.innerRoot);
        if (fontColor) {
          this.root.style.color = fontColor;
        }
        if (this.currentText) {
          ["language", "id", "label"].map(function(key) {
            _this4.root.setAttribute("data-".concat(key), _this4.currentText[key] || "");
          });
        }
        this.player.root.appendChild(this.root);
        addObserver(player.root, this._onResize);
      }
      this.player.on("destroy", this.destroy);
      this.player.on("timeupdate", this._onTimeupdate);
      this.player.on("core_event", this._onCoreEvents);
      if (this._isOpen) {
        this.switch().catch(function(e) {
          _this4._log("[switch]", e);
        });
      }
    }
  }, {
    key: "detachPlayer",
    value: function detachPlayer() {
      var player = this.player, config = this.config;
      if (!player) {
        return;
      }
      player.off("destroy", this.destroy);
      player.off("timeupdate", this._onTimeupdate);
      player.on("core_event", this._onCoreEvents);
      if (config.domRender) {
        if (player.root) {
          unObserver(player.root, this._onResize);
          player.root.removeChild(this.root);
        }
        this.innerRoot = null;
        this.root = null;
      }
      this.player = null;
    }
  }, {
    key: "switch",
    value: function _switch() {
      var _this5 = this;
      var subtitle = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        id: "",
        language: ""
      };
      this._log("switch", subtitle);
      this._loadingTrack = subtitle;
      return new Promise(function(resolve, reject) {
        if (!subtitle.id && !subtitle.language) {
          if (_this5.currentText) {
            _this5._loadingTrack = {};
            _this5._updateCurrent(_this5.currentText);
            _this5.switchOn();
            var err = _ERROR(0, {
              message: "switch default subtitle success"
            });
            resolve(err);
            return;
          } else {
            var _err = _ERROR(5, {
              message: "no default subtitle"
            });
            reject(_err);
            return;
          }
        }
        if (_this5.currentText && checkSubtitle(subtitle, _this5.currentText)) {
          _this5._loadingTrack = {};
          _this5._updateCurrent(_this5.currentText);
          _this5.switchOn();
          resolve(_ERROR(0));
        } else {
          var nextSubtitle = null;
          _this5.__removeByTime(_this5._curTexts, 0);
          for (var i = 0; i < _this5.textTrack.length; i++) {
            if (checkSubtitle(subtitle, _this5.textTrack[i])) {
              nextSubtitle = _this5.textTrack[i];
              break;
            }
          }
          _this5._log("nextSubtitle", nextSubtitle);
          if (nextSubtitle) {
            _this5._emitPlayerSwitch(_this5.currentText, nextSubtitle);
            if (nextSubtitle.list) {
              _this5._loadingTrack = {};
              _this5._updateCurrent(nextSubtitle);
              _this5.switchOn();
              resolve(_ERROR(0));
            } else {
              _this5._log("this._loadTrack", nextSubtitle);
              _this5._updateCurrent(nextSubtitle);
              _this5._loadTrack(nextSubtitle).then(function(textTrack) {
                _this5.addStyles(textTrack);
                if (_this5._loadingTrack.id === nextSubtitle.id || _this5._loadingTrack.language === textTrack.language) {
                  _this5._loadingTrack = {};
                  _this5._updateCurrent(textTrack);
                  _this5.switchOn();
                  resolve(_ERROR(0));
                } else {
                  var _err2 = _ERROR(6, {
                    message: "check _loadingTrack fail id: ".concat(_this5._loadingTrack.id, "  nextSubtitle:").concat(textTrack.id)
                  });
                  reject(_err2);
                }
              }).catch(function(err2) {
                reject(err2);
              });
            }
          } else {
            var _err3 = _ERROR(4, new Error("The is no subtitle with id:[{".concat(subtitle.id, "}] or language:[").concat(subtitle.language, "]")));
            reject(_err3);
          }
        }
      });
    }
  }, {
    key: "switchExt",
    value: function switchExt() {
      var _this6 = this;
      var subtitle = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        id: "",
        language: ""
      };
      return new Promise(function(resolve, reject) {
        if (!subtitle.id && !subtitle.language) {
          _this6.currentExtText = null;
          resolve(_ERROR(0));
        } else {
          var nextSubtitle = null;
          for (var i = 0; i < _this6.textTrack.length; i++) {
            if (checkSubtitle(subtitle, _this6.textTrack[i])) {
              nextSubtitle = _this6.textTrack[i];
              break;
            }
          }
          if (nextSubtitle && !checkSubtitle(nextSubtitle, _this6.currentText)) {
            _this6._loadTrack(nextSubtitle).then(function(textTrack) {
              _this6.currentExtText = textTrack;
              resolve(_ERROR(0));
            });
          }
        }
      });
    }
  }, {
    key: "switchOn",
    value: function switchOn() {
      this._log("switchOn");
      this._isOpen = true;
      this.show();
      this.emit(EVENTS.CHANGE, this.currentText);
    }
  }, {
    key: "switchOff",
    value: function switchOff() {
      this._isOpen = false;
      this.hide();
      this.emit(EVENTS.OFF);
    }
  }, {
    key: "isOpen",
    get: function get() {
      return this._isOpen;
    }
  }, {
    key: "_log",
    value: function _log() {
      if (this.config.debugger) {
        var _console;
        for (var _len2 = arguments.length, msg = new Array(_len2), _key = 0; _key < _len2; _key++) {
          msg[_key] = arguments[_key];
        }
        (_console = console).log.apply(_console, ["[xgSubtitle]"].concat(msg));
      }
    }
  }, {
    key: "_loadTrack",
    value: function _loadTrack(textTrack) {
      var _this7 = this;
      this._log("_loadTrack", textTrack.language, textTrack);
      var promise = new ProxyPromise();
      var contentType = "";
      var content = "";
      if (textTrack.json) {
        contentType = "json";
        content = textTrack.json;
      } else if (textTrack.stringContent && !textTrack.url) {
        contentType = "string";
        content = textTrack.stringContent;
      }
      if (content) {
        parse(content, contentType).then(function(data) {
          textTrack.format = data.format;
          textTrack.styles = data.styles;
          textTrack.list = data.list;
          promise.resolve(textTrack);
        }).catch(function(e) {
          promise.reject(e);
        });
        return promise;
      }
      var urls = textTrack.url;
      if (urls.length === 0) {
        promise.resolve(textTrack);
        return promise;
      }
      var url = urls.splice(0, 1);
      loadSubTitle(url[0]).then(function(data) {
        textTrack.format = data.format;
        textTrack.styles = data.styles;
        if (!textTrack.list) {
          textTrack.list = [];
        }
        _this7._pushList(textTrack.list, data.list);
        urls.length > 1 && _this7._loadTrackUrls(textTrack, 2);
        promise.resolve(textTrack);
      }).catch(function(e) {
        promise.reject(e);
      });
      return promise;
    }
  }, {
    key: "_emitPlayerSwitch",
    value: function _emitPlayerSwitch(curSubtitle, nextSubTitle) {
      if (curSubtitle && this.config.updateMode === "live") {
        curSubtitle.list = [];
        curSubtitle.url = [];
      }
      var data = _objectSpread2({
        lang: nextSubTitle.language
      }, nextSubTitle);
      this._log("emit subtile_switch ", nextSubTitle, data);
      this.player && this.player.emit("switch_subtitle", data);
    }
  }, {
    key: "_loadTrackUrls",
    value: function _loadTrackUrls(textTrack, maxCount, promise) {
      var _this8 = this;
      var len = textTrack.url.length;
      var urls = len > maxCount ? textTrack.url.splice(0, maxCount) : textTrack.url.splice(0, len);
      var loadingCount = urls.length;
      this._log("_loadTrackUrls", textTrack.language, len, urls.length, loadingCount);
      urls.forEach(function(item, i) {
        var obj = _objectSpread2(_objectSpread2({}, item), {}, {
          index: i
        });
        loadSubTitle(obj).then(function(data) {
          textTrack.format = data.format;
          textTrack.styles = data.format;
          if (!textTrack.list) {
            textTrack.list = [];
          }
          _this8._pushList(textTrack.list, data.list);
          loadingCount--;
        }).catch(function(e) {
          loadingCount--;
        }).finally(function(e) {
          if (loadingCount === 0) {
            promise && promise.resolve(textTrack);
            _this8._loadTrackUrls(textTrack, 2);
          }
        });
      });
    }
  }, {
    key: "_freshUrl",
    value: function _freshUrl(textTrack) {
      var data = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        url: ""
      };
      var i = -1;
      textTrack.url.forEach(function(item, index) {
        if (item.url === data.url) {
          i = index;
        }
      });
      if (i > -1) {
        textTrack.url.splice(i, 1);
      }
    }
  }, {
    key: "_pushList",
    value: function _pushList(dist, src) {
      var _start = src[0].start;
      var _end = src[src.length - 1].end;
      if (dist.length === 0 || _start >= dist[dist.length - 1].end) {
        src.forEach(function(item) {
          dist.push(item);
        });
      } else {
        var _index = -1;
        for (var i = 0; i < dist.length; i++) {
          if (dist[i].start > _end) {
            _index = i;
            break;
          }
        }
        if (_index > -1) {
          src.forEach(function(item, i2) {
            dist.splice(_index + i2, 0, item);
          });
        }
      }
      return dist;
    }
  }, {
    key: "_updateCurrent",
    value: function _updateCurrent(subtitle) {
      var _this9 = this;
      this.currentText = subtitle;
      if (this.config.domRender && this.root) {
        ["language", "id", "label"].map(function(key) {
          _this9.root.setAttribute("data-".concat(key), _this9.currentText[key] || "");
        });
        this.__remove(this._cids);
      }
      this._cids = [];
      this._gid = -1;
      this._cid = -1;
      this._curTexts = [];
      var curTime = this._getPlayerCurrentTime();
      curTime && (this.config.updateMode === "live" ? this._liveUpdate(curTime) : this._update(curTime));
    }
  }, {
    key: "__loadAll",
    value: function __loadAll() {
      var _this10 = this;
      this.textTrack.forEach(function(item) {
        _this10._loadTrack(item);
      });
    }
  }, {
    key: "getDelCid",
    value: function getDelCid(oldArr, newArr) {
      var ret = [];
      for (var i = 0; i < oldArr.length; i++) {
        if (!newArr.includes(oldArr[i])) {
          ret.push(oldArr[i]);
        }
      }
      return ret;
    }
  }, {
    key: "getNewCid",
    value: function getNewCid(oldArr, newArr) {
      var ret = [];
      for (var i = 0; i < newArr.length; i++) {
        if (!oldArr.includes(newArr[i])) {
          ret.push(newArr[i]);
        }
      }
      return ret;
    }
  }, {
    key: "_liveUpdate",
    value: function _liveUpdate(currentTime) {
      var _this11 = this;
      if (!this.currentText || !this.currentText.list || !this.currentText.list.length) {
        return;
      }
      var _cids = [];
      var _gid = findIndexByTime(currentTime, this.currentText.list, this._gid);
      if (_gid > -1) {
        _cids = findCIndexByTime(currentTime, this.currentText.list[_gid].list, this._cid);
      }
      this.__removeByTime(this._curTexts, currentTime);
      this._log("_liveUpdate", currentTime, _gid, _cids, this.currentText.list[0].list[0].start, this.currentText.list[0].list[0].end);
      if (_cids.length > 0) {
        var ret = getItemsByIndex(this.currentText.list, _gid, _cids);
        var _len = this._curTexts.length;
        var _si = _len > 0 ? this._curTexts[_len - 1].index : 0;
        ret.forEach(function(item, i) {
          item.index = i + _si;
          _this11._curTexts.push(item);
        });
        this.__render(ret);
      }
      this.emit("update", this._curTexts);
    }
  }, {
    key: "_update",
    value: function _update(currentTime) {
      var _this12 = this;
      if (!this.currentText || !this.currentText.list || !this.currentText.list.length) {
        return;
      }
      var _gid = findIndexByTime(currentTime, this.currentText.list, this._gid);
      var _cids = [];
      if (_gid > -1) {
        _cids = findCIndexByTime(currentTime, this.currentText.list[_gid].list, this._cid);
      }
      if (_cids.length < 1) {
        this._cids.length > 0 && this.config.domRender && this.__remove(this._cids);
        this._cids = [];
        return;
      }
      if (this._cids === _cids && _gid === this._gid) {
        return;
      }
      this._gid = _gid;
      this._cid = _cids[0];
      var delCids = this.getDelCid(this._cids, _cids);
      var newCids = this.getNewCid(this._cids, _cids);
      this._cids = _cids;
      this.config.domRender && this.__remove(delCids);
      var texts = [];
      newCids.map(function(item) {
        var text = _this12.currentText.list[_gid].list[item];
        text.index = item;
        texts.push(text);
      });
      if (this.currentExtText) {
        newCids.map(function(item) {
          var textExt = _this12.currentText.list[_gid].list[item];
          textExt.index = item;
          texts.push(textExt);
        });
      }
      this.emit("update", texts);
      this.__render(texts, currentTime);
    }
  }, {
    key: "_getPlayerCurrentTime",
    value: function _getPlayerCurrentTime() {
      if (!this.player) {
        return 0;
      }
      var currentTime = this.player.currentTime;
      var curTime = parseInt(currentTime * 1e3 + this.seiTime * 1e3 - this.lastSeiTime * 1e3, 10) / 1e3;
      return curTime;
    }
  }, {
    key: "_onSubtitlePlaylist",
    value: function _onSubtitlePlaylist(subtitleList) {
      this._log("_onSubtitlePlaylist", subtitleList);
      var list = subtitleList.map(function(item) {
        return {
          label: item.name,
          language: item.lang,
          id: item.id,
          isDefault: item.default,
          url: [],
          mUrl: item.url
        };
      });
      this.setSubTitles(list);
    }
  }, {
    key: "_onSubtitleSegment",
    value: function _onSubtitleSegment(urlList) {
      this._log("_onSubtitleSegment", urlList.length, urlList[0].lang, urlList[0].sn, urlList[urlList.length - 1].sn, urlList[0].start, urlList[urlList.length - 1].end);
      if (!urlList || urlList.length === 0) {
        return;
      }
      var lang = urlList[0].lang;
      var urls = urlList.map(function(item) {
        return {
          id: item.sn,
          url: item.url,
          duration: item.duration,
          start: item.start,
          end: item.end
        };
      });
      var _sub = {
        language: lang,
        url: urls
      };
      if (!checkSubtitle(_sub, this.currentText)) {
        return;
      }
      this.updateSubTitle(_sub);
    }
  }, {
    key: "_onCoreSeiintime",
    value: function _onCoreSeiintime(e) {
      try {
        var sei = e.time / 1e3;
        this._log("_onCoreSeiintime sei", sei, this.seiTime, this.lastSeiTime);
        this.seiTime = sei;
        this.lastSeiTime = this.player ? this.player.currentTime : 0;
      } catch (e2) {
      }
    }
  }, {
    key: "resize",
    value: function resize(width, height) {
      var _this13 = this;
      var _this$config2 = this.config, baseSizeX = _this$config2.baseSizeX, baseSizeY = _this$config2.baseSizeY, minMobileSize = _this$config2.minMobileSize, minSize = _this$config2.minSize, fitVideo = _this$config2.fitVideo, offsetBottom = _this$config2.offsetBottom;
      var scale = this._videoMeta.scale;
      this._videoMeta.lwidth = width;
      this._videoMeta.lheight = height;
      var vWidth;
      var vHeight = 0;
      if (height / width * 100 >= scale) {
        vHeight = parseInt(scale * width, 10) / 100;
        vWidth = width;
      } else {
        vHeight = height;
        vWidth = parseInt(height / scale * 100, 10);
      }
      this._videoMeta.vWidth = vWidth;
      this._videoMeta.vHeight = vHeight;
      var _size = 0;
      var fontSize = 0;
      if (scale > 120) {
        _size = baseSizeY;
        fontSize = parseInt(_size * vHeight / 1080, 10);
      } else {
        _size = baseSizeX;
        fontSize = parseInt(_size * vWidth / 1920, 10);
      }
      var mini = IS_MOBILE ? minMobileSize : minSize;
      fontSize = fontSize < mini ? mini : fontSize > _size ? _size : fontSize;
      var style = {
        fontSize
      };
      var vBottom = parseInt((height - vHeight) / 2, 10);
      var vLeft = parseInt((width - vWidth) / 2, 10);
      var marginBottom = parseInt(vHeight * offsetBottom, 10) / 100;
      this._videoMeta.vBottom = vBottom;
      this._videoMeta.vLeft = vLeft;
      this._videoMeta.marginBottom = marginBottom;
      if (fitVideo) {
        style.bottom = vBottom + marginBottom;
        style.left = style.right = vLeft;
      }
      Object.keys(style).map(function(item) {
        _this13.root.style[item] = "".concat(style[item], "px");
      });
      this.emit(EVENTS.RESIZE, {
        vLeft,
        vBottom,
        marginBottom,
        vWidth,
        vHeight,
        fontSize,
        scale
      });
    }
  }, {
    key: "__startResize",
    value: function __startResize(target) {
      var _this14 = this;
      var rect = target.getBoundingClientRect();
      var _videoMeta = this._videoMeta;
      var width = rect.width, height = rect.height;
      if (this._iId) {
        clearTimeout(this._iId);
        this._iId = null;
      }
      if (width > 0 && height > 0 && (width !== _videoMeta.lwidth || height !== _videoMeta.lheight)) {
        this._iC = 0;
        this.resize(width, height);
      } else {
        if (this._iC >= 5) {
          this._iC = 0;
          return;
        }
        this._iC++;
        this._iId = setTimeout(function() {
          _this14.__startResize(target);
        }, 50);
      }
    }
  }, {
    key: "__removeByTime",
    value: function __removeByTime(list, time) {
      var ids = [];
      for (var i = 0; i < list.length; i++) {
        if (!time || list[i].end < time) {
          ids.push(i);
        }
      }
      if (ids.length === 0) {
        return;
      }
      list.splice(ids[0], ids.length);
      this.config.domRender && this.__remove(ids);
    }
  }, {
    key: "__remove",
    value: function __remove(ids) {
      var _this15 = this;
      if (!ids || ids.length < 1) {
        return;
      }
      var children = this.innerRoot.children;
      var removeIndex = [];
      for (var i = 0; i < children.length; i++) {
        var index = Number(children[i].getAttribute("data-index"));
        if (ids.includes(index)) {
          removeIndex.push(children[i]);
        }
      }
      removeIndex.map(function(item) {
        _this15.innerRoot.removeChild(item);
      });
    }
  }, {
    key: "__render",
    value: function __render() {
      var _this16 = this;
      var jsonItems = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      this._log("__render", jsonItems.length, this.config.domRender);
      if (jsonItems.length > 0 && this.config.domRender) {
        jsonItems.map(function(jsonItem) {
          var className = "text-track-".concat(_this16.config.line);
          jsonItem.text.map(function(item, index) {
            if (index > 0) {
              className += " text-track-deputy";
            }
            var attr = {
              "data-start": jsonItem.start,
              "data-end": jsonItem.end,
              "data-index": jsonItem.index
            };
            _this16.innerRoot.appendChild(createDom("xg-text-track-span", item, attr, className));
          });
        });
      }
    }
  }, {
    key: "show",
    value: function show() {
      if (!this.config.domRender) {
        return;
      }
      removeClass(this.root, "text-track-hide");
    }
  }, {
    key: "hide",
    value: function hide() {
      if (!this.config.domRender) {
        return;
      }
      addClass(this.root, "text-track-hide");
      this.innerRoot.innerHTML = "";
    }
  }, {
    key: "emit",
    value: function emit(event, data) {
      var _get2;
      for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key2 = 2; _key2 < _len3; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }
      (_get2 = _get(_getPrototypeOf(Subtitle2.prototype), "emit", this)).call.apply(_get2, [this, event, data].concat(args));
    }
  }, {
    key: "on",
    value: function on(event, callback) {
      var _get3;
      for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key3 = 2; _key3 < _len4; _key3++) {
        args[_key3 - 2] = arguments[_key3];
      }
      (_get3 = _get(_getPrototypeOf(Subtitle2.prototype), "on", this)).call.apply(_get3, [this, event, callback].concat(args));
    }
  }, {
    key: "once",
    value: function once(event, callback) {
      var _get4;
      for (var _len5 = arguments.length, args = new Array(_len5 > 2 ? _len5 - 2 : 0), _key4 = 2; _key4 < _len5; _key4++) {
        args[_key4 - 2] = arguments[_key4];
      }
      (_get4 = _get(_getPrototypeOf(Subtitle2.prototype), "once", this)).call.apply(_get4, [this, event, callback].concat(args));
    }
  }, {
    key: "off",
    value: function off(event, callback) {
      var _get5;
      for (var _len6 = arguments.length, args = new Array(_len6 > 2 ? _len6 - 2 : 0), _key5 = 2; _key5 < _len6; _key5++) {
        args[_key5 - 2] = arguments[_key5];
      }
      (_get5 = _get(_getPrototypeOf(Subtitle2.prototype), "off", this)).call.apply(_get5, [this, event, callback].concat(args));
    }
  }, {
    key: "offAll",
    value: function offAll() {
      _get(_getPrototypeOf(Subtitle2.prototype), "removeAllListeners", this).call(this);
    }
  }, {
    key: "marginBottom",
    get: function get() {
      var _this$_videoMeta = this._videoMeta, bottom = _this$_videoMeta.bottom, marginBottom = _this$_videoMeta.marginBottom;
      return this.config.fitVideo ? bottom + marginBottom : marginBottom;
    }
  }]);
  return Subtitle2;
}(EventEmitter);
export { Subtitle as default };
