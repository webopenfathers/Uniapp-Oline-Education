/**
 * @typedef { import('xgplayer-helper-models').VideoTrack } VideoTrack
 */
/**
 * @typedef { import('xgplayer-helper-models').AudioTrack } AudioTrack
 */
export default class Mp4Remuxer {
    static get EVENTS(): {
        MEDIA_SEGMENT: string;
        INIT_SEGMENT: string;
        RANDOM_ACCESS_POINT: string;
        TRACK_REMUXED: string;
    };
    constructor({ videoMeta, audioMeta, curTime }: {
        videoMeta: any;
        audioMeta: any;
        curTime: any;
    });
    TAG: string;
    _dtsBase: number;
    _videoMeta: any;
    _audioMeta: any;
    _audioDtsBase: number;
    _videoDtsBase: any;
    _isDtsBaseInited: boolean;
    isFirstVideo: boolean;
    isFirstAudio: boolean;
    videoAllDuration: number;
    audioAllDuration: number;
    audioRemuxed: number;
    videoRemuxed: number;
    mp4Durations: {
        keys: any[];
    };
    destroy(): void;
    /**
     * @param {AudioTrack} audioTrack
     * @param {VideoTrack} videoTrack
     */
    remux(audioTrack: AudioTrack, videoTrack: VideoTrack): void;
    resetDtsBase(): void;
    seek(time: any): void;
    /**
     * @param {'video' | 'audio' } type
     * @param {*} meta
     * @return {Buffer}
     */
    remuxInitSegment(type: 'video' | 'audio', meta: any): Buffer;
    /**
     * @param {AudioTrack} audioTrack
     * @param {VideoTrack} videoTrack
     */
    calcDtsBase(audioTrack: AudioTrack, videoTrack: VideoTrack): void;
    /**
     * @param {VideoTrack}videoTrack
     * @return {*}
     * @private
     */
    private remuxVideo;
    /**
     *
     * @param {AudioTrack} track
     * @return {*}
     * @private
     */
    private remuxAudio;
    segmentRemuxed(type: any, buffer: any, bufferDuration: any): void;
    set videoDtsBase(arg: any);
    get videoDtsBase(): any;
    get audioDtsBase(): number;
}
export type VideoTrack = import('xgplayer-helper-models').VideoTrack;
export type AudioTrack = import('xgplayer-helper-models').AudioTrack;
import Buffer from "./buffer";
