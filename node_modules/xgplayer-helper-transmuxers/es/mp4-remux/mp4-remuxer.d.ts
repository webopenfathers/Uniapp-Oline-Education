export default class Mp4Box {
    static get EVENTS(): {
        MEDIA_SEGMENT: string;
        INIT_SEGMENT: string;
        RANDOM_ACCESS_POINT: string;
        TRACK_REMUXED: string;
    };
    constructor({ videoMeta, audioMeta, curTime, options }: {
        videoMeta: any;
        audioMeta: any;
        curTime: any;
        options: any;
    });
    _dtsBase: number;
    _options: any;
    _samplePerChunk: any;
    _videoMeta: any;
    _audioMeta: any;
    _audioDtsBase: any;
    _videoDtsBase: number;
    _isDtsBaseInited: boolean;
    isFirstVideo: boolean;
    isFirstAudio: boolean;
    videoAllDuration: number;
    audioAllDuration: number;
    audioSamples: any[];
    audioRemuxed: number;
    videoRemuxed: number;
    mp4Durations: {
        keys: any[];
    };
    ctsNum: number;
    set videoMeta(arg: any);
    get videoMeta(): any;
    set audioMeta(arg: any);
    get audioMeta(): any;
    destroy(): void;
    remux(audioTrack: any, videoTrack: any): void;
    /**
     * @description 生成包含音频和视频的mp4
     * @param {*} audioTrack 音频track
     * @param {*} videoTrack 视频track
     * @returns null
     */
    remuxMix(audioTrack: any, videoTrack: any): void;
    /**
     * @description remux单独的音频或者视频生成mp4文件
     * @param {*} track 音频或者视频的track对象
     * @param {*} type 表示track类型，'audio'或者'video'
     * @returns null
     */
    remuxMp4(track: any, type: any): void;
    /**
     * @description 生成音视频都有的mp4的moov
     * @param {*} duration 视频的时长
     * @param {*} timeScale 视频的timescale
     * @param {array} tracksMeta 音视频的meta
     * @returns null
     */
    mixMoov(duration: any, timeScale: any, tracksMeta: any[]): any;
    /**
     * @description dts to sample的映射表
     * @param {*} sample 音频或者视频的一个sample
     * @param {*} nextSample sample的下一个sample
     * @param {*} sampleDeltas sample的duration
     * @returns sample的duration
     */
    getSttsBoxData(sample: any, nextSample: any, sampleDeltas: any): any;
    /**
     * @description 保存pts与dts的差值到ctsEntry，如果没有B帧，没有这个表
     * @param {*} cts 视频帧的cts
     * @param {*} ctsEntry 保存cts的数组
     * @returns null
     */
    getCttsBoxData(cts: any, ctsEntry: any): void;
    /**
     * @description 生成trunk与sample的映射关系表
     * @param {*} sampleCount 一共有多少个sample
     * @param {*} chunks 保存映射关系的数组
     */
    getStscBoxData(sampleCount: any, chunks: any): void;
    /**
     * @description 生成chunk offset
     * @param {*} sampleIndex 当前sample的索引值
     * @param {*} sampleSize 当前sample的字节大小
     * @param {*} sampleCount track的sample的个数
     * @param {*} chunkOffset 当前sample在mp4文件中的字节便宜量
     * @param {*} chunksOffset 存储chunkoffset的数组
     * @returns 当前sample的字节偏移
     */
    getStcoBoxData(sampleIndex: any, sampleSize: any, sampleCount: any, chunkOffset: any, chunksOffset: any): any;
    /**
     * @description 把每个sample的字节大小存储到sampleSizes里
     * @param {int} sampleByteSize 每个sample的字节大小
     * @param {array} sampleSizes 存储字节大小的数组
     */
    getStszBoxData(sampleByteSize: int, sampleSizes: any[]): void;
    /**
     * @description 把关键帧对应的index放到keyFrames数组中
     * @param {int} sampleIndex keyframe在所有sample中的索引值
     * @param {array} keyFrames 存储keyframe的index的数组
     */
    getStssBoxData(sampleIndex: int, keyFrames: any[]): void;
    getDuration(currentDuration: any, duration: any): any;
    downLoadMp4(mp4: any): void;
}
