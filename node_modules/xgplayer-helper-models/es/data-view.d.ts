export default XGDataView;
declare class XGDataView {
    /**
     * [readByte 从DataView中读取数据]
     * @param  {DataView} buffer [DataView实例]
     * @param  {Number} size   [读取字节数]
     * @return {Number}        [整数]
     */
    static readByte(buffer: DataView, size: number, sign: any): number;
    constructor(buffer: any);
    /** @type {ArrayBuffer} */
    buffer: ArrayBuffer;
    /** @type {DataView} */
    dataview: DataView;
    /**
     * byffer length
     * @return {number}
     */
    get length(): number;
    /**
     * set current read position of data-view
     * @param value
     */
    set position(arg: any);
    /**
     * set current read position of data-view
     * @param value
     */
    get position(): any;
    /**
     * move read position backward
     * @param count
     */
    back(count: any): void;
    getUint8(offset: any): number;
    /**
     * move read position forward
     * @param count
     */
    skip(count: any): void;
    /**
     * @return {Number}
     */
    readUint8(): number;
    /**
     * @return {Number}
     */
    readUint16(): number;
    /**
     * @return {Number}
     */
    readUint24(): number;
    /**
     * @return {Number}
     */
    readUint32(): number;
    /**
     * @return {Number}
     */
    readUint64(): number;
    /**
     * @return {Number}
     */
    readInt8(): number;
    /**
     * @return {Number}
     */
    readInt16(): number;
    /**
     * @return {Number}
     */
    readInt32(): number;
    /**
     * @return {Uint8Array}
     */
    writeUint32(value: any): Uint8Array;
}
